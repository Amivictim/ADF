-- Gerekli Servisleri Tanƒ±mla
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- UI K√ºt√ºphanesini Y√ºkle
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wizard"))()
local Window = Library:NewWindow("ADF By Victimüò≠üôè")

-----------------------------
-- Kill Aura B√∂l√ºm√º
-----------------------------
local CombatSection = Window:NewSection("Combat")
local killauraEnabled = false

CombatSection:CreateToggle("Killaura", function(state)
    killauraEnabled = state
    if killauraEnabled then
        spawn(function()
            while killauraEnabled do
                for _, object in pairs(workspace:GetDescendants()) do
                    if object:IsA("Model") and object:FindFirstChild("Humanoid") then
                        local args = {
                            [1] = {
                                ["phsic"] = {
                                    ["Power"] = 21.21320343017578,
                                    ["Time"] = 0.15,
                                    ["Dir"] = Vector3.new(-0.4679, 0.7071, 0.5301)
                                },
                                ["damage"] = 30,
                                ["castPercent"] = 0,
                                ["hitID"] = 1,
                                ["isSetNetworkOwnerEnemy"] = true,
                                ["skillID"] = 15020001
                            },
                            [2] = object.Name
                        }
                        ReplicatedStorage.Msg.HitEvent:FireServer(unpack(args))
                    end
                end
                wait(0.1)
            end
        end)
    end
end)

-----------------------------
-- Tween Mobs (Yan Yana Hareket Ettirme)
-----------------------------
local sideTweenEnabled = false
local sideTweenOffset = 5
local sideTweenTime = 2
local originalPositions = {}
local activeTweenLoops = {}

CombatSection:CreateToggle("Tween Mobs", function(state)
    sideTweenEnabled = state
    if sideTweenEnabled then
        spawn(function()
            while sideTweenEnabled do
                for _, object in pairs(workspace:GetDescendants()) do
                    if object:IsA("Model") and object:FindFirstChild("Humanoid") and object ~= localPlayer.Character then
                        local part = object:FindFirstChild("HumanoidRootPart") or object.PrimaryPart
                        if part and not activeTweenLoops[object] then
                            if not originalPositions[object] then
                                originalPositions[object] = part.Position
                            end
                            activeTweenLoops[object] = true
                            spawn(function()
                                while sideTweenEnabled and object.Parent do
                                    local basePos = originalPositions[object] or part.Position
                                    local rightPos = basePos + Vector3.new(sideTweenOffset, 0, 0)
                                    local tweenInfo = TweenInfo.new(sideTweenTime, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
                                    local tween = TweenService:Create(part, tweenInfo, {Position = rightPos})
                                    tween:Play()
                                    tween.Completed:Wait()
                                    if not sideTweenEnabled or not object.Parent then break end
                                    local leftPos = basePos + Vector3.new(-sideTweenOffset, 0, 0)
                                    tween = TweenService:Create(part, tweenInfo, {Position = leftPos})
                                    tween:Play()
                                    tween.Completed:Wait()
                                end
                                activeTweenLoops[object] = nil
                            end)
                        end
                    end
                end
                wait(5)
            end
            activeTweenLoops = {}
        end)
    end
end)

-----------------------------
-- Farming B√∂l√ºm√º
-----------------------------
local FarmingSection = Window:NewSection("Farm?")
local chosenLocation, chosenDifficulty = nil, nil

local locationMapping = {
    ["Final Valley"] = "1_1",
    ["Labs"] = "1_2",
    ["Village"] = "1_3"
}
local locationOptions = {"Final Valley", "Labs", "Village"}

FarmingSection:CreateDropdown("Select Location", locationOptions, 1, function(selected)
    chosenLocation = locationMapping[selected]
end)

local difficultyMapping = {
    ["Easy"] = 1,
    ["Normal"] = 2,
    ["Hard"] = 3
}
local difficultyOptions = {"Easy", "Normal", "Hard"}

FarmingSection:CreateDropdown("Select Difficulty", difficultyOptions, 1, function(selected)
    chosenDifficulty = difficultyMapping[selected]
end)

local farmingEnabled = false
FarmingSection:CreateToggle("Start", function(state)
    farmingEnabled = state
    if farmingEnabled then
        spawn(function()
            while farmingEnabled do
                if chosenLocation and chosenDifficulty then
                    wait(1)
                    local args1 = {"Start Farm", chosenLocation}
                    ReplicatedStorage.Msg.RemoteFunction:InvokeServer(unpack(args1))
                    wait(0.1)
                    local args2 = {"Set Difficulty", chosenDifficulty}
                    ReplicatedStorage.Msg.RemoteFunction:InvokeServer(unpack(args2))
                end
                wait(0.1)
            end
        end)
    end
end)

-----------------------------
-- Dungeons B√∂l√ºm√º
-----------------------------
local DungeonsSection = Window:NewSection("Dungeons")
local chosenDungeon, chosenDungeonDifficulty = nil, nil

local dungeonMapping = {
    ["Snow Dungeon"] = "DUNGEON_1",
    ["Demon City"] = "DUNGEON_2",
    ["Throne Of Orcs"] = "DUNGEON_3",
    ["Remains Of Frost"] = "DUNGEON_4"
}
local dungeonOptions = {"Snow Dungeon", "Demon City", "Throne Of Orcs", "Remains Of Frost"}

DungeonsSection:CreateDropdown("Select Dungeon", dungeonOptions, 1, function(selected)
    chosenDungeon = dungeonMapping[selected]
end)

local dungeonDifficultyMapping = {
    ["Wave:1-Easy"] = 1,
    ["Wave:51-Normal"] = 2,
    ["Wave:101-Hard"] = 3
}
local dungeonDifficultyOptions = {"Wave:1-Easy", "Wave:51-Normal", "Wave:101-Hard"}

DungeonsSection:CreateDropdown("Select Dungeon Difficulty", dungeonDifficultyOptions, 1, function(selected)
    chosenDungeonDifficulty = dungeonDifficultyMapping[selected]
end)

local dungeonsEnabled = false
DungeonsSection:CreateToggle("Start", function(state)
    dungeonsEnabled = state
    if dungeonsEnabled then
        spawn(function()
            while dungeonsEnabled do
                if chosenDungeon and chosenDungeonDifficulty then
                    wait(1)
                    local args1 = {"Start Dungeon", chosenDungeon}
                    ReplicatedStorage.Msg.RemoteFunction:InvokeServer(unpack(args1))
                    wait(0.1)
                    local args2 = {"Set Dungeon Difficulty", chosenDungeonDifficulty}
                    ReplicatedStorage.Msg.RemoteFunction:InvokeServer(unpack(args2))
                end
                wait(0.1)
            end
        end)
    end
end)

-----------------------------
-- Stats B√∂l√ºm√º
-----------------------------
local StatsSection = Window:NewSection("Stats")
local chosenStat = nil
local statMapping = {
    ["Health"] = "3",
    ["Attack"] = "1",
    ["Defence"] = "2",
    ["Critical"] = "6"
}
local statOptions = {"Health", "Attack", "Defence", "Critical"}

StatsSection:CreateDropdown("Select Stat", statOptions, 1, function(selected)
    chosenStat = selected
end)

local statsToggleEnabled = false
StatsSection:CreateToggle("Give Stats", function(state)
    statsToggleEnabled = state
    if statsToggleEnabled then
        spawn(function()
            while statsToggleEnabled do
                if chosenStat then
                    local args = {"Increase Stat", {["attr"] = statMapping[chosenStat], ["addonce"] = 4}}
                    ReplicatedStorage.Msg.RemoteFunction:InvokeServer(unpack(args))
                end
                wait(0.1)
            end
        end)
    end
end)
